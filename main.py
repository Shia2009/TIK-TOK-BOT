import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
import asyncio
import logging
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import LabeledPrice, Message
from aiogram.types import PreCheckoutQuery
from aiogram.types import ContentType
import yt_dlp
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery

print('\n\n https://github.com/Shia2009/ \n\n')



bot = Bot(token='7783596711:AAEdH8ixw4ErNJWiRBbWHNVcjtcxajaIKh0')
admin=''#–£–∫–∞–∂–∏—Ç–µ id —Å–≤–æ–π –∫–æ–º—É –æ—Ç–ø—Ä–∞–ª–≤—è—Ç—å –æ —Ç–æ–º —á—Ç–æ –∫—Ç–æ —Ç–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç
start_message='–ü—Ä–∏–≤–µ—Ç ! <b> –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å</b>'#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
dp = Dispatcher()


class Form(StatesGroup):
    waiting_for_message = State()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)



@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(start_message, parse_mode='HTML')


def payment_keyboard():
    builder=InlineKeyboardBuilder()
    builder.button(text=f'–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠ê', pay=True)

    return builder.as_markup()

@dp.message(F.text)#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –õ–Æ–ë–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
async def with_puree(message: types.Message):
    if message.text=='–æ—Ç–ø—Ä–∞–≤–∏—Ç—å 1 –∑–≤–µ–∑–¥—É –∞–≤—Ç–æ—Ä—É':
        prices = [LabeledPrice(label='XTR', amount=1)]
        await message.answer_invoice(
            title='–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
            description='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥–æ–π',
            prices=prices,
            provider_token="",
            payload="channel_support",
            currency="XTR",
            reply_markup=payment_keyboard(),
        )
    if message.text.startswith(("https", "http")):
        user_channel_status = await bot.get_chat_member(chat_id='-1002022328830', user_id=message.chat.id)
        if user_channel_status.status != 'left':
            try:
                url = message.text
                ydl_opts = {
                    'format': 'bestvideo+bestaudio/best',
                    'outtmpl': f'{message.chat.id}.%(ext)s',  # —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                }
            except:
                await bot.send_message(message.from_user.id, '<b>–û—à–∏–±–∫–∞ –≤ —Å—Å—ã–ª–∫–µ –≤–∏–¥–µ–æ</b>', parse_mode='HTML')
            await bot.send_message(message.from_user.id, '<b>–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ...</b>', parse_mode='HTML')
            await bot.send_message(message.from_user.id, '‚åõ')
            try:
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([url])
            except:
                await bot.send_message(message.from_user.id, '<b>–û—à–∏–±–∫–∞ –≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ</b>', parse_mode='HTML')
            await bot.send_message(admin, f'–í–∏–¥–µ–æ —Å–∫–∞—á–µ–Ω–Ω–æ {message.text} @{message.chat.username}')
            await bot.send_message(message.from_user.id, '<b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ...</b>', parse_mode='HTML')
            await bot.send_message(message.from_user.id, '‚úà')
            video = FSInputFile(fr'{os.getcwd()}\{message.chat.id}.mp4')

            await message.answer_video(
                video=video,
                caption="–í–∞—à–µ –≤–∏–¥–µ–æ",
                supports_streaming=True
            )
            os.remove(fr'{os.getcwd()}\{message.chat.id}.mp4')
            kb = [
                [types.KeyboardButton(text="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å 1 –∑–≤–µ–∑–¥—É –∞–≤—Ç–æ—Ä—É")]]
            markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è ?")
            await bot.send_message(message.from_user.id, '<b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ 1 –∑–≤–µ–∑–¥–æ–π</b>', reply_markup=markup, parse_mode='HTML')
            await bot.send_message(admin, f'–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–Ω–æ {message.text} @{message.chat.username}')
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", url="https://t.me/NOMEROK_CHANNEL")],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑üîÑ", callback_data="check")]
            ])
            await bot.send_message(message.from_user.id, '‚ùå<b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª !</b>', reply_markup=kb, parse_mode='HTML')




@dp.callback_query(lambda c: c.data == "check")
async def handle_yes(callback: types.CallbackQuery):
    await callback.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞')
    user_channel_status = await bot.get_chat_member(chat_id='-1002022328830', user_id=callback.message.chat.id)
    if user_channel_status.status != 'left':
        await bot.send_message(callback.message.chat.id,'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!</b>', parse_mode='HTML')
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", url="https://t.me/NOMEROK_CHANNEL")],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑üîÑ", callback_data="check")]
        ])
        await bot.send_message(callback.message.chat.id, '<b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</b>', reply_markup=kb, parse_mode='HTML')

@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@dp.message(F.succesful_payment)
async def process_successful_payment(message: types.Message)->None:
    await message.answer(f'{message.successful_payment.telegram_payment_charge_id}', message_effect_id='5104841245755180586')


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())